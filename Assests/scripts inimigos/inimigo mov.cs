using UnityEngine;
using System.Collections;
using System.Collections.Generic; // üîπ Permite usar List<Transform>

// ==================================================================
// Script: inimigomov.cs
// Fun√ß√£o: Faz o inimigo patrulhar por v√°rios pontos, perseguir o jogador
//         e atacar quando estiver pr√≥ximo.
// ==================================================================

public class inimigomov : MonoBehaviour
{
    // ===========================
    // üî∏ SE√á√ÉO DE PATRULHA
    // ===========================
    [Header("Patrulha")]
    public List<Transform> patrolPoints; // Lista de pontos que o inimigo vai seguir
    public float patrolSpeed = 2f;       // Velocidade da patrulha
    private int currentPointIndex = 0;   // √çndice do ponto atual (come√ßa em 0 = primeiro da lista)

    // ===========================
    // üî∏ SE√á√ÉO DE DETEC√á√ÉO DO JOGADOR
    // ===========================
    [Header("Detec√ß√£o do Jogador")]
    public Transform player;       // Refer√™ncia ao transform do jogador
    public float chaseRange = 5f;  // Dist√¢ncia m√°xima para come√ßar a perseguir
    public float chaseSpeed = 4f;  // Velocidade enquanto persegue

    // ===========================
    // üî∏ SE√á√ÉO DE ATAQUE
    // ===========================
    [Header("Ataque")]
    public float attackRange = 1f;         // Dist√¢ncia m√≠nima para atacar
    public float attackCooldown = 1.5f;   // Tempo entre ataques
    private float lastAttackTime;          // Armazena o tempo do √∫ltimo ataque

    // ===========================
    // üî∏ COMPONENTES INTERNOS
    // ===========================
    private Rigidbody2D rb;   // Refer√™ncia ao Rigidbody2D (para mover)
    private Animator anim;    // Refer√™ncia ao Animator (para anima√ß√µes)

    private bool isWaiting = false;     // Impede a√ß√µes durante espera
    private bool isRandomizing = false; // Impede a√ß√µes durante comportamento aleat√≥rio

    // ==================================================================
    // üîπ Start() ‚Äî executa uma vez no in√≠cio do jogo
    // ==================================================================
    void Start()
    {
        rb = GetComponent<Rigidbody2D>(); // Pega o Rigidbody2D do inimigo
        anim = GetComponent<Animator>();  // Pega o Animator (se tiver)
    }

    // ==================================================================
    // üîπ Update() ‚Äî executa a cada frame
    // ==================================================================
    void Update()
    {
        // Se o jogador n√£o foi atribu√≠do ou h√° menos de 2 pontos, n√£o faz nada
        if (player == null || patrolPoints.Count < 2)
            return;

        // Calcula a dist√¢ncia entre o inimigo e o jogador
        float distanceToPlayer = Vector2.Distance(transform.position, player.position);

        // Se o jogador estiver dentro da √°rea de persegui√ß√£o, persegue
        if (distanceToPlayer <= chaseRange)
            ChasePlayer();
        else
            // Caso contr√°rio, apenas patrulha entre os pontos
            Patrol();

        // Atualiza o par√¢metro de anima√ß√£o (se houver Animator)
        if (anim != null)
            anim.SetFloat("Speed", Mathf.Abs(rb.linearVelocity.x));
    }

    // ==================================================================
    // üîπ Patrol() ‚Äî faz o inimigo andar pelos pontos
    // ==================================================================
    void Patrol()
    {
        // Se estiver parado ou aleat√≥rio, n√£o faz nada
        if (isWaiting || isRandomizing) return;

        // Pega o ponto de destino atual
        Transform targetPoint = patrolPoints[currentPointIndex];

        // Calcula dire√ß√£o normalizada at√© o ponto
        Vector3 direction = (targetPoint.position - transform.position).normalized;

        // Aplica movimento no Rigidbody
        rb.linearVelocity = new Vector2(direction.x * patrolSpeed, rb.linearVelocity.y);

        // Faz o inimigo virar para o lado que est√° andando
        if (direction.x != 0)
            transform.localScale = new Vector3(Mathf.Sign(direction.x), 1, 1);

        // Calcula a dist√¢ncia at√© o ponto atual
        float distanceToTarget = Vector2.Distance(transform.position, targetPoint.position);

        // Se chegou bem perto do ponto, troca para o pr√≥ximo
        if (distanceToTarget < 0.3f)
        {
            ChangeTargetPoint();
        }

        // Pequena chance de comportamento aleat√≥rio
        if (Random.value < 0.0015f)
        {
            StartCoroutine(RandomBehavior());
        }
    }

    // ==================================================================
    // üîπ ChangeTargetPoint() ‚Äî muda para o pr√≥ximo ponto da lista
    // ==================================================================
    void ChangeTargetPoint()
    {
        // Aumenta o √≠ndice
        currentPointIndex++;

        // Se chegou ao fim da lista, volta para o in√≠cio (loop)
        if (currentPointIndex >= patrolPoints.Count)
            currentPointIndex = 0;
    }

    // ==================================================================
    // üîπ RandomBehavior() ‚Äî comportamento aleat√≥rio (para ou muda dire√ß√£o)
    // ==================================================================
    IEnumerator RandomBehavior()
    {
        isRandomizing = true; // Evita que outro comportamento ocorra junto

        float randomChoice = Random.value;       // Gera um n√∫mero entre 0 e 1
        float originalSpeed = patrolSpeed;       // Guarda a velocidade atual
        patrolSpeed = Random.Range(1.5f, 7f);    // Muda temporariamente a velocidade

        if (randomChoice < 0.5f)
        {
            // üî∏ Metade das vezes: o inimigo para por um tempo
            rb.linearVelocity = Vector2.zero; // Zera movimento
            yield return new WaitForSeconds(Random.Range(0.5f, 2f)); // Espera aleatoriamente
        }
        else
        {
            // üîπ Outras vezes: muda de dire√ß√£o (vai pro pr√≥ximo ponto)
            ChangeTargetPoint();
        }

        // Restaura comportamento normal
        isRandomizing = false;
    }

    // ==================================================================
    // üîπ ChasePlayer() ‚Äî faz o inimigo perseguir o jogador
    // ==================================================================
    void ChasePlayer()
    {
        // Calcula dire√ß√£o e dist√¢ncia at√© o jogador
        Vector3 direction = (player.position - transform.position).normalized;
        float distance = Vector2.Distance(transform.position, player.position);

        // Se o jogador ainda estiver longe, anda at√© ele
        if (distance > attackRange)
        {
            rb.linearVelocity = new Vector2(direction.x * chaseSpeed, rb.linearVelocity.y);
        }
        else
        {
            // Se estiver perto o suficiente, para e ataca
            rb.linearVelocity = Vector2.zero;
            Attack();
        }

        // Faz o inimigo olhar para o jogador
        if (direction.x != 0)
            transform.localScale = new Vector3(Mathf.Sign(direction.x), 1, 1);
    }

    // ==================================================================
    // üîπ Attack() ‚Äî executa ataque com cooldown
    // ==================================================================
    void Attack()
    {
        // Se j√° passou o tempo de espera desde o √∫ltimo ataque
        if (Time.time >= lastAttackTime + attackCooldown)
        {
            // Atualiza o tempo do √∫ltimo ataque
            lastAttackTime = Time.time;

            // Aqui voc√™ pode adicionar anima√ß√£o, som, dano, etc.
            Debug.Log("üí• Inimigo atacou!");
        }
    }

    // ==================================================================
    // üîπ OnDrawGizmosSelected() ‚Äî desenha no editor (modo Scene)
    // ==================================================================
    void OnDrawGizmosSelected()
    {
        // Cor vermelha para visualiza√ß√£o
        Gizmos.color = Color.red;

        // Desenha as esferas e linhas ligando os pontos
        for (int i = 0; i < patrolPoints.Count; i++)
        {
            if (patrolPoints[i] != null)
            {
                // Desenha uma esfera no ponto
                Gizmos.DrawSphere(patrolPoints[i].position, 0.1f);

                // Desenha linha at√© o pr√≥ximo ponto, se existir
                if (i + 1 < patrolPoints.Count && patrolPoints[i + 1] != null)
                    Gizmos.DrawLine(patrolPoints[i].position, patrolPoints[i + 1].position);
            }
        }
    }
}
